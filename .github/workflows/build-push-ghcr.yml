name: Build and Push Multi-Arch Docker Image to Public GHCR

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

env:
  IMAGE_BASE_NAME: aou-analysis-runner
  DOCKERFILE_PATH: ./Dockerfile
  GHCR_LOWERCASE_OWNER: sauersml # Ensure this is your lowercase GitHub username/org

jobs:
  build-and-push-multi-arch-to-ghcr:
    name: Build Docker (Multi-Arch) and Push to GHCR
    runs-on: ubuntu-latest # This runner is amd64

    permissions:
      contents: 'read'
      packages: 'write'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        # QEMU is used for cross-platform builds (e.g., building arm64 on an amd64 runner)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # Buildx is required for multi-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Meta (Generate Image Tags and Labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.GHCR_LOWERCASE_OWNER }}/${{ env.IMAGE_BASE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # You can add more specific tags if needed, e.g., for ARM64 explicitly
            # type=raw,value=latest-arm64,enable=${{ github.ref == 'refs/heads/main' }} # Example

      - name: Build and Push Docker Image to GHCR (Multi-Arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          # Specify the platforms to build for
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
